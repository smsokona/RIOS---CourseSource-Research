fontface = "bold",
size = 3,
direction = "y",
hjust = 0,
segment.size = .7,
segment.alpha = .5,
segment.linetype = "dotted",
box.padding = .4,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
show.legend = FALSE
)  +
# labels
labs(x = "Year", y = "Word Count") +
# remove "a" from legend box
theme(legend.position = "none") +
# change the theme
theme_minimal() +
# add colorblind safe palette
scale_color_manual(values = c("#40004b", "#762a83", "#9970ab", "#c51b7d", "#543005", "#053061", "#a6dba0", "#5aae61", "#1b7837", "#00441b"))
# arrange two plots into one column
require(gridExtra)
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
# create 'Word' column, which will be used to color the lines
dei_word_counts <- dei_word_counts %>%
# removing students due to skewness
filter(inclusive_teach_tokens != "students") %>%
mutate(Word = if_else(inclusive_teach_tokens %in% highlights, inclusive_teach_tokens, "other"),
Word = as.factor(Word)) %>%
mutate(Word = fct_relevel(Word, "other", after = Inf),
name_lab = if_else(Year == 2021, inclusive_teach_tokens, NA_character_))
# create line graph s
base_lineplot <- ggplot(
# filter for counts > 1, for the highlighted words, and the top 40 words across all years
dei_word_counts %>% filter(n > 1 & Word != "other" & inclusive_teach_tokens %in% top_10_distinct),
aes(Year, n, Word = inclusive_teach_tokens)
) +
# lines for the non-highlighted words
geom_line(
data = dei_word_counts %>% filter(Word == "other"),
color = "grey75",
size = .6,
alpha = .5
) +
# lines for the highlighted words
geom_line(
aes(color = Word),
size = 0.9
) +
# use ggrepel package to automatically place labels
geom_text_repel(
aes(color = Word, label = name_lab),
family = "Lato",
fontface = "bold",
size = 3,
direction = "y",
hjust = 0,
segment.size = .7,
segment.alpha = .5,
segment.linetype = "dotted",
box.padding = .4,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
show.legend = FALSE
)  +
# labels
labs(x = "Year", y = "Word Count") +
# remove "a" from legend box
theme(legend.position = "none") +
# change the theme
theme_minimal() +
# add colorblind safe palette
scale_color_manual(values = c("#40004b", "#762a83", "#9970ab", "#c51b7d", "#543005", "#053061", "#a6dba0", "#5aae61", "#1b7837", "#00441b"))
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
# create bar graph over time
base_bargraph_over_time <- dei_word_counts %>%
# using only 14.17% DEI related words in dataset
filter(inclusive_teach_tokens %in% top_10_distinct) %>%
# log the word counts, due to skewness
mutate(log_n = log(n)) %>%
ggplot(aes(inclusive_teach_tokens, log_n)) +
geom_col() +
facet_wrap(~Year, nrow = 2) +
labs(y = "Log(Word Count)") +
scale_fill_identity(guide = "none") +
# suppress the x axis
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_x_discrete(labels = NULL, breaks = NULL) +
# change the theme
theme_minimal()
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
# create bar graph over time
base_bargraph_over_time <- dei_word_counts %>%
# using only 14.17% DEI related words in dataset
filter(inclusive_teach_tokens %in% top_10_distinct) %>%
# log the word counts, due to skewness
mutate(log_n = log(n)) %>%
ggplot(aes(inclusive_teach_tokens, log_n)) +
geom_col() +
facet_wrap(~Year, nrow = 2) +
labs(y = "Log(Word Count)") +
scale_fill_identity(guide = "none") +
# suppress the x axis
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_x_discrete(labels = NULL, breaks = NULL) + labs(x = " ") +
# change the theme
theme_minimal()
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
rios_data_tokenized %>%
# filter for those that are DEI related
filter(dei_relatedit == "TRUE") %>%
# group by year
group_by(Year)
rios_data_tokenized %>%
# filter for those that are DEI related
filter(dei_relatedit == "TRUE") %>%
# group by year
group_by(Year) %>%
count(inclusive_teach_tokens)
?count
?n
?n()
?summarise
View(rios_data_tokenized)
# calculate the total amount of DEI related words for each YEAR
totaldeiyear <- rios_data_tokenized %>%
# filter for those that are DEI related
filter(dei_relatedit == "TRUE") %>%
# group by year
group_by(Year) %>%
# count the number of times each word appears, by year
count(inclusive_teach_tokens) %>%
# add the number of rows (a.k.a. the number of words) for each year
summarise(totaldei_by_year = n())
# calculate the total amount of DEI related words for each ARTICLE
totaldeiarticle <- rios_data_tokenized %>%
filter(dei_relatedit == "TRUE") %>%
group_by(article_num, Year) %>%
count(inclusive_teach_tokens) %>%
summarise(totaldei_by_article = n())
# calculate the total amount of words in each YEAR
totalwordsyear <- rios_data_tokenized %>%
group_by(Year) %>%
count(inclusive_teach_tokens, sort = TRUE)  %>%
summarise(total_by_year = n())
# calculate the total amount of words in each ARTICLE
totalwordsarticle <-  rios_data_tokenized %>%
group_by(article_num, Year) %>%
count(inclusive_teach_tokens, sort = TRUE)  %>%
summarise(total_by_article = n())
# same code as above, but for 2-word phrases
# calculate the total amount of DEI related 2-word phrases for each YEAR
total2deiyear <- rios_data_tokenized2 %>%
filter(dei_related == "TRUE") %>%
group_by(Year) %>%
count(it_tokens_2w) %>%
summarise(totaldei_by_year = n())
# calculate the total amount of DEI related 2-word phrases for each ARTICLE
total2deiarticle <- rios_data_tokenized2 %>%
filter(dei_related == "TRUE") %>%
group_by(article_num, Year) %>%
count(it_tokens_2w) %>%
summarise(totaldei_by_article = n())
# calculate the total amount of 2-word phrases in each YEAR
total2wordsyear <- rios_data_tokenized2 %>%
group_by(Year) %>%
count(it_tokens_2w, sort = TRUE)  %>%
summarise(total_by_year = n())
# calculate the total amount of 2-word phrases in each ARTICLE
total2wordsarticle <-  rios_data_tokenized2 %>%
group_by(article_num, Year) %>%
count(it_tokens_2w, sort = TRUE)  %>%
summarise(total_by_article = n())
# same code as above, but for 3-word phrases
# calculate the total amount of DEI related 3-word phrases for each YEAR
total3deiyear <- rios_data_tokenized3 %>%
filter(dei_related == "TRUE") %>%
group_by(Year) %>%
count(it_tokens_3w) %>%
summarise(totaldei_by_year = n())
# calculate the total amount of DEI related 3-word phrases for each ARTICLE
total3deiarticle <- rios_data_tokenized3 %>%
filter(dei_related == "TRUE") %>%
group_by(article_num, Year) %>%
count(it_tokens_3w) %>%
summarise(totaldei_by_article = n())
# calculate the total amount of 3-word phrases in each YEAR
total3wordsyear <- rios_data_tokenized3 %>%
group_by(Year) %>%
count(it_tokens_3w, sort = TRUE)  %>%
summarise(total_by_year = n())
# calculate the total amount of 3-word phrases in each ARTICLE
total3wordsarticle <-  rios_data_tokenized3 %>%
group_by(article_num, Year) %>%
count(it_tokens_3w, sort = TRUE)  %>%
summarise(total_by_article = n())
df1 %>%
df1 <- totaldeiarticle %>%
full_join(totalwordsarticle, by = c("article_num", "Year")) %>%
# calculate the ratio of DEI "relatedness"
mutate(ratio = totaldei_by_article/total_by_article) %>%
group_by(Year)  %>%
rename("Article Number" = "article_num",
"Total DEI By Article" = "totaldei_by_article",
"Total By Article" = "total_by_article",
"DEI Ratio 1w" = "ratio")
df1 <- totaldeiarticle %>%
full_join(totalwordsarticle, by = c("article_num", "Year")) %>%
# calculate the ratio of DEI "relatedness"
mutate(ratio = totaldei_by_article/total_by_article) %>%
group_by(Year)  %>%
rename("Article Number" = "article_num",
"Total DEI By Article" = "totaldei_by_article",
"Total By Article" = "total_by_article",
"DEI Ratio 1w" = "ratio")
df1 %>%
head(10)
View(totaldeiarticle)
df1 %>%
mutate(`Group Year` = case_when(
as.numeric(Year) <= 2018 ~ "2014 - 2018",
as.numeric(Year) > 2018 ~ "2019 - 2022"
)) %>% group_by(`Group Year`) %>%
View(df1)
summarise(wvg_wrd_ct = mean(`DEI Ratio 1w`))
df1 %>%
mutate(`Group Year` = case_when(
as.numeric(Year) <= 2018 ~ "2014 - 2018",
as.numeric(Year) > 2018 ~ "2019 - 2022"
)) %>% group_by(`Group Year`) %>%
summarise(avg_wrd_ct = mean(`DEI Ratio 1w`))
# create box plot and store in function
boxplot(df1$`DEI Ratio 1w` ~ df1$Year,
df1,
xlab = "Year",
ylab = "Ratio",
main = "The Ratio of DEI Related Words Over Time",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a", "#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average word count
abline(v = 0.119, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average word count
abline(v = 0.201, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Word Count", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# create box plot and store in function
boxplot(df1$`DEI Ratio 1w` ~ df1$Year,
df1,
xlab = "Year",
ylab = "Ratio",
main = "The Ratio of DEI Related Words Over Time",
horizontal = FALSE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a", "#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average word count
abline(v = 0.119, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average word count
abline(v = 0.201, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Word Count", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# create box plot and store in function
boxplot(df1$`DEI Ratio 1w` ~ df1$Year,
df1,
xlab = "Year",
ylab = "Ratio",
main = "The Ratio of DEI Related Words Over Time",
horizontal = FALSE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a", "#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average word count
abline(h = 0.119, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average word count
abline(h = 0.201, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Word Count", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# create box plot and store in function
boxplot(df1$`DEI Ratio 1w` ~ df1$Year,
df1,
xlab = "Ratio",
ylab = "Year",
main = "The Ratio of DEI Related Words Over Time",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a", "#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average word count
abline(v = 0.119, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average word count
abline(v = 0.201, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Word Count", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
ratioboxplot <- function(){
# factor years to reorder from oldest to most recent (to be consistent with table below)
rios_data$Year <- factor(rios_data$Year , levels=c("2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014"))
# create box plot and store in function
boxplot(df1$`DEI Ratio 1w` ~ df1$Year,
df1,
xlab = "Ratio",
ylab = "Year",
main = "The Ratio of DEI Related Words Over Time",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4", "#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average word count
abline(v = 0.119, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average word count
abline(v = 0.201, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Word Count", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# unfactor years
rios_data$Year <-  unfactor(rios_data$Year)
}
ratioboxplot()
# create a function which creates a boxplot
ratio2boxplot <- function(){
# factor years to reorder from oldest to most recent (to be consistent with table below)
rios_data$Year <- factor(rios_data$Year , levels=c("2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014"))
# create box plot and store in function
boxplot(df2$`DEI Ratio 2w` ~ df2$Year,
df2,
xlab = "Ratio",
ylab = "Year",
main = "The Ratio of DEI Related 2-Word Phrases Over Time",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4", "#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average ratio
abline(v = 0.119, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average ratio
abline(v = 0.201, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Ratio", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# unfactor years
rios_data$Year <-  unfactor(rios_data$Year)
}
# call
ratio2boxplot()
df2 <- total2deiarticle %>%
full_join(total2wordsarticle, by = c("article_num", "Year")) %>%
# calculate the ratio of DEI "relatedness"
mutate(ratio = totaldei_by_article/total_by_article) %>%
group_by(Year)  %>%
rename("Article Number" = "article_num",
"Total DEI By Article" = "totaldei_by_article",
"Total By Article" = "total_by_article",
"DEI Ratio 2w" = "ratio")
# call
ratio2boxplot()
df2 %>%
+     mutate(`Group Year` = case_when(
+         as.numeric(Year) <= 2018 ~ "2014 - 2018",
+         as.numeric(Year) > 2018 ~ "2019 - 2022"
+     )) %>% group_by(`Group Year`) %>%
df2 %>% mutate(`Group Year` = case_when(as.numeric(Year) <= 2018 ~ "2014 - 2018", as.numeric(Year) > 2018 ~ "2019 - 2022")) %>% group_by(`Group Year`) %>% summarise(avg_wrd_ct = mean(`DEI Ratio 2w`))
df2 %>% mutate(`Group Year` = case_when(as.numeric(Year) <= 2018 ~ "2014 - 2018", as.numeric(Year) > 2018 ~ "2019 - 2022")) %>% group_by(`Group Year`) %>% summarise(avg_wrd_ct = mean(`DEI Ratio 2w`, na.rm = TRUE))
df3 <- total3deiarticle %>%
full_join(total3wordsarticle, by = c("article_num", "Year")) %>%
# calculate the ratio of DEI "relatedness"
mutate(ratio = totaldei_by_article/total_by_article) %>%
group_by(Year)  %>%
rename("Article Number" = "article_num",
"Total DEI By Article" = "totaldei_by_article",
"Total By Article" = "total_by_article",
"DEI Ratio 3w" = "ratio")
df3 %>% mutate(`Group Year` = case_when(as.numeric(Year) <= 2018 ~ "2014 - 2018", as.numeric(Year) > 2018 ~ "2019 - 2022")) %>% group_by(`Group Year`) %>% summarise(avg_wrd_ct = mean(`DEI Ratio 3w`, na.rm = TRUE))
# create a function which creates a boxplot
ratio3boxplot <- function(){
# factor years to reorder from oldest to most recent (to be consistent with table below)
rios_data$Year <- factor(rios_data$Year , levels=c("2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014"))
# create box plot and store in function
boxplot(df3$`DEI Ratio 3w` ~ df3$Year,
df3,
xlab = "Ratio",
ylab = "Year",
main = "The Ratio of DEI Related 3-Word Phrases Over Time",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4", "#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average ratio
abline(v = 0.336, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average ratio
abline(v = 0.349, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Ratio", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# unfactor years
rios_data$Year <-  unfactor(rios_data$Year)
}
# call
ratio3boxplot()
# call
ratio2boxplot()
# color and impose horizontal line of 2014 - 2018 group average ratio
abline(v = 0.199, col = "#b2df8a", lty = "solid", lwd = 3)
# create a function which creates a boxplot
ratioboxplot <- function(){
# factor years to reorder from oldest to most recent (to be consistent with table below)
rios_data$Year <- factor(rios_data$Year , levels=c("2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014"))
# create box plot and store in function
boxplot(df1$`DEI Ratio 1w` ~ df1$Year,
df1,
xlab = "Ratio",
ylab = "Year",
main = "The Ratio of DEI Related Words Over Time",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4", "#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average ratio
abline(v = 0.199, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average ratio
abline(v = 0.201, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Ratio", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# unfactor years
rios_data$Year <-  unfactor(rios_data$Year)
}
# call
ratioboxplot()
# create a function which creates a boxplot
ratio2boxplot <- function(){
# factor years to reorder from oldest to most recent (to be consistent with table below)
rios_data$Year <- factor(rios_data$Year , levels=c("2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014"))
# create box plot and store in function
boxplot(df2$`DEI Ratio 2w` ~ df2$Year,
df2,
xlab = "Ratio",
ylab = "Year",
main = "The Ratio of DEI Related 2-Word Phrases Over Time",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4", "#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a"),
ylim = c(0,1))
# color and impose horizontal line of 2014 - 2018 group average ratio
abline(v = 0.234, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average ratio
abline(v = 0.253, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Ratio", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# unfactor years
rios_data$Year <-  unfactor(rios_data$Year)
}
# call
ratio2boxplot()
# store a vector of 256 zero's (the length of our data frame, to be replaced below)
DEI_count<-rep(0, 256)
# count the amount of DEI words in each article and store the count in the vector above
for(i in 1:length(DEI_count)){
for (k in 1:length(rios_data_tokenized$Title)){
if( rios_data_tokenized$dei_relatedit[k] == "TRUE" && rios_data_tokenized$article_num[k] == rios_data$article_num[i] ){
DEI_count[i]=DEI_count[i]+1
}
}
}
# store string containing all required packages
my_packages <- c('varhandle', 'skimr', 'tidyverse', 'tidytext', 'stopwords', "wordcloud", "reshape2", "ggraph", "kableExtra",'readr', 'dplyr', "igraph","SnowballC", "knitr", "ggrepel", "ggtext", "showtext", "rcartocolor", "gridExtra", "cowplot")
# store all installed packages
ya_installed <- library()$results[,1]
# check whether required packages are already installed and grab only those that still need installation
need_install<-my_packages[!(my_packages %in% ya_installed)]
# install required packages
lapply(need_install, install.packages, character.only = TRUE)
#similar process as above, but loading the packages
# store all installed packages
ya_loaded <- (.packages())
# check whether required packages are already installed and grab only those that still need installation
need_load<-my_packages[!(my_packages %in% ya_loaded)]
# load required packages
lapply(need_load, require, character.only = TRUE)
knitr::opts_chunk$set(dpi = 300, # save the PNGs at a nice high quality please, at 300 pi
cache = TRUE,
warning = FALSE, # doesn't print warnings
message = FALSE) # doesn't print messages
# import the datasets which were exported from the Data Cleaning folder
#original cleaned dataset
rios_data <- read_csv("https://raw.githubusercontent.com/smsokona/RIOS---CourseSource-Research/master/Data%20Cleaning/Data%20for%20Export/rios_data.csv")
# cleaned tokenized dataset
rios_data_tokenized <- read_csv("https://raw.githubusercontent.com/smsokona/RIOS---CourseSource-Research/master/Data%20Cleaning/Data%20for%20Export/rios_data_tokenized.csv")
# cleaned tokenized dataset for two word phrases
rios_data_tokenized2 <- read_csv("https://raw.githubusercontent.com/smsokona/RIOS---CourseSource-Research/master/Data%20Cleaning/Data%20for%20Export/rios_data_tokenized2.csv")
# cleaned tokenized dataset for three word phrases
rios_data_tokenized3 <- read_csv("https://raw.githubusercontent.com/smsokona/RIOS---CourseSource-Research/master/Data%20Cleaning/Data%20for%20Export/rios_data_tokenized3.csv")
#cleaned dataset of words counts, grouped by year
dei_word_counts <- read_csv("https://raw.githubusercontent.com/smsokona/RIOS---CourseSource-Research/master/Data%20Cleaning/Data%20for%20Export/dei_word_counts.csv")
# store a vector of 256 zero's (the length of our data frame, to be replaced below)
DEI_count<-rep(0, 256)
# count the amount of DEI words in each article and store the count in the vector above
for(i in 1:length(DEI_count)){
for (k in 1:length(rios_data_tokenized$Title)){
if( rios_data_tokenized$dei_relatedit[k] == "TRUE" && rios_data_tokenized$article_num[k] == rios_data$article_num[i] ){
DEI_count[i]=DEI_count[i]+1
}
}
}
# store the DEI count in the df
rios_data$`DEI Word count` <- DEI_count
# calculate and store the % of DEI words in the df
rios_data$`DEI Words %` <-(rios_data$DEI_count/rios_data$`Word Count of Inclusive Teaching?`)*100
