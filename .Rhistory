error.bar(base_barplot1, data1$Avg_Wrd_Ct, data1$ic)
# A function to add arrows on the chart
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
# store data for bar plot
data <- rios_data %>%
group_by(`Group Year`) %>%
# calculate avg. wrd ct, length, and standard deviation for each group year
summarise(Avg_Wrd_Ct = mean(`Word Count of Inclusive Teaching?`, na.rm = TRUE),
n = n(),
sd = sd(`Word Count of Inclusive Teaching?`, na.rm = TRUE)) %>%
# calculate the standard error and  the standard error multiplied by the value of the t-distribution for 0.5
mutate(se = sd/sqrt(n),
ic = se * qt((1-0.05)/2 + 0.5, n-1))
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
base_barplot <- barplot(data$Avg_Wrd_Ct ~ data$`Group Year`, axis.lty = 1, ylim = c(0,250), col = c("#b2df8a", "#1f78b4"), xlab = "Year", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
# rotate the x axis on the barplot
text(base_barplot, par("usr")[3], srt = 45, labels = c("2014 - 2018", "2019 - 2022") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
# store the base barplot in a variable
base_barplot1 <- barplot(data1$Avg_Wrd_Ct ~ data1$`Attended Workshop?`, axis.lty = 1, ylim = c(0,320), col = c("#a6cee3", "#1f78b4"), xlab = "Attendance Type", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot1, data1$Avg_Wrd_Ct, data1$ic)
# rotate the x axis on the barplot
text(base_barplot1, par("usr")[3], labels = c("No", "Yes") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
# store the base barplot in a variable
base_barplot1 <- barplot(data1$Avg_Wrd_Ct ~ data1$`Attended Workshop?`, axis.lty = 1, ylim = c(0,320), col = c("#a6cee3", "#1f78b4"), xlab = "Attendance Type", ylab = "Average Word Count", names.arg = data1$`Attended Workshop?`)
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot1, data1$Avg_Wrd_Ct, data1$ic)
# store the base barplot in a variable
base_barplot1 <- barplot(data1$Avg_Wrd_Ct ~ data1$`Attended Workshop?`, axis.lty = 1, ylim = c(0,320), col = c("#a6cee3", "#1f78b4"), xlab = "Attendance Type", ylab = "Average Word Count", main = "Avg. Word Count of Inclusive Teaching Section By Attendance Type", names.arg = data1$`Attended Workshop?`)
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot1, data1$Avg_Wrd_Ct, data1$ic)
rios_data_tokenized %>%
filter(dei_relatedit == "TRUE") %>%
group_by(article_num, `Attended Workshop?`) %>%
count(inclusive_teach_tokens) %>%
summarise(totaldeia = n()) %>%
group_by(`Attended Workshop?`) %>%
# calculate avg. wrd ct, length, and standard deviation for each group
summarise(Avg_word_count = mean(totaldeia),
n = n(),
sd = sd(totaldeia, na.rm = TRUE)) %>%
# calculate the standard error and  the standard error multiplied by the value of the t-distribution for 0.5
mutate(se = sd/sqrt(n),
ic = se * qt((1-0.05)/2 + 0.5, n-1))
View(data)
View(data1)
# calculate total DEI related words for each article, and store in dataframe
dei_by_workshop_data <- rios_data_tokenized %>%
filter(dei_relatedit == "TRUE") %>%
group_by(article_num, `Attended Workshop?`) %>%
count(inclusive_teach_tokens) %>%
summarise(totaldeia = n()) %>%
group_by(`Attended Workshop?`) %>%
# calculate avg. wrd ct, length, and standard deviation for each group
summarise(Avg_word_count = mean(totaldeia),
n = n(),
sd = sd(totaldeia, na.rm = TRUE)) %>%
# calculate the standard error and  the standard error multiplied by the value of the t-distribution for 0.5
mutate(se = sd/sqrt(n),
ic = se * qt((1-0.05)/2 + 0.5, n-1))
base_barplot1 <- barplot(data1$Avg_Wrd_Ct ~ data1$`Attended Workshop?`, axis.lty = 1, ylim = c(0,320), col = c("#a6cee3", "#1f78b4"), xlab = "Attendance Type", ylab = "Average Word Count", main = "Avg. Word Count of Inclusive Teaching Section", sub = "By Attendance Type", names.arg = data1$`Attended Workshop?`)
# store the base barplot in a variable
base_barplot1 <- barplot(data1$Avg_Wrd_Ct ~ data1$`Attended Workshop?`, axis.lty = 1, ylim = c(0,320), col = c("#a6cee3", "#1f78b4"), xlab = "Attendance Type", ylab = "Average Word Count", main = "Avg. Word Count of Inclusive Teaching Section", sub = "By Attendance Type", names.arg = data1$`Attended Workshop?`)
base_barplot1 <- barplot(data1$Avg_Wrd_Ct ~ data1$`Attended Workshop?`, axis.lty = 1, ylim = c(0,320), col = c("#a6cee3", "#1f78b4"), xlab = "Attendance Type", ylab = "Average Word Count", main = "Avg. Word Count of Inclusive Teaching Section By Attendance Type", names.arg = data1$`Attended Workshop?`)
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot1, data1$Avg_Wrd_Ct, data1$ic)
title(sub = "By Attendance Type")
# store the base barplot in a variable
base_barplot2 <- barplot(dei_by_workshop_data$Avg_word_count ~ dei_by_workshop_data$`Attended Workshop?`, axis.lty = 1, ylim = c(0,25), col = c("#a6cee3", "#1f78b4"), xlab = "Attendance Type", ylab = "Average Word Count", main = "Avg. (DEI Related) Word Count of Inclusive Teaching Section", names.arg = data1$`Attended Workshop?`)
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot2, dei_by_workshop_data$Avg_word_count, dei_by_workshop_data$ic)
## Code for Bar Chart
# return top 10 distinct words in each year
top_10_distinct <- dei_word_counts %>%
group_by(Year) %>%
# return top 10 word counts for each year
slice(1:10) %>%
# ungroup by year
ungroup(Year) %>%
# return distinct words across the df
distinct(inclusive_teach_tokens)
# transpose and convert to vector
top_10_distinct <- c(t(top_10_distinct))
# create bar graph over time
base_bargraph_over_time <- dei_word_counts %>%
# using only 14.17% DEI related words in dataset
filter(inclusive_teach_tokens %in% top_10_distinct) %>%
# log the word counts, due to skewness
mutate(log_n = log(n)) %>%
ggplot(aes(inclusive_teach_tokens, log_n)) +
geom_col() +
facet_wrap(~Year, nrow = 2) +
labs(y = "Log(Word Count)") +
scale_fill_identity(guide = "none") +
# suppress the x axis
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_x_discrete(labels = NULL, breaks = NULL) + labs(x = " ") +
# change the theme
theme_minimal()
## Code for Line Graph
# define the group of words that are going to be highlighted
highlights <- c("opportunity", "inclusive", "diverse", "diversity", "individual", "visual", "engage", "environment", "active", "encourage")
n <- length(highlights)
# create 'Word' column, which will be used to color the lines
dei_word_counts <- dei_word_counts %>%
# removing students due to skewness
filter(inclusive_teach_tokens != "students") %>%
mutate(Word = if_else(inclusive_teach_tokens %in% highlights, inclusive_teach_tokens, "other"),
Word = as.factor(Word)) %>%
mutate(Word = fct_relevel(Word, "other", after = Inf),
name_lab = if_else(Year == 2021, inclusive_teach_tokens, NA_character_))
# create line graph s
base_lineplot <- ggplot(
# filter for counts > 1, for the highlighted words, and the top 40 words across all years
dei_word_counts %>% filter(n > 1 & Word != "other" & inclusive_teach_tokens %in% top_10_distinct),
aes(Year, n, Word = inclusive_teach_tokens)
) +
# lines for the non-highlighted words
geom_line(
data = dei_word_counts %>% filter(Word == "other"),
color = "grey75",
size = .6,
alpha = .5
) +
# lines for the highlighted words
geom_line(
aes(color = Word),
size = 0.9
) +
# use ggrepel package to automatically place labels
geom_text_repel(
aes(color = Word, label = name_lab),
family = "Lato",
fontface = "bold",
size = 3,
direction = "y",
hjust = 0,
segment.size = .7,
segment.alpha = .5,
segment.linetype = "dotted",
box.padding = .4,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
show.legend = FALSE
)  +
# labels
labs(x = "Year", y = "Word Count") +
# remove "a" from legend box
theme(legend.position = "none") +
# change the theme
theme_minimal() +
# remove legend
guides(fill = "none")
# add colorblind safe palette
scale_color_manual(values = c("#40004b", "#762a83", "#9970ab", "#c51b7d", "#543005", "#053061", "#a6dba0", "#5aae61", "#1b7837", "#00441b"))
# arrange two plots into one column
require(gridExtra)
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
# add colorblind safe palette
scale_color_manual(values = c("#40004b", "#762a83", "#9970ab", "#c51b7d", "#543005", "#053061", "#a6dba0", "#5aae61", "#1b7837", "#00441b"))
# arrange two plots into one column
require(gridExtra)
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
# create 'Word' column, which will be used to color the lines
dei_word_counts <- dei_word_counts %>%
# removing students due to skewness
filter(inclusive_teach_tokens != "students") %>%
mutate(Word = if_else(inclusive_teach_tokens %in% highlights, inclusive_teach_tokens, "other"),
Word = as.factor(Word)) %>%
mutate(Word = fct_relevel(Word, "other", after = Inf))
# create line graph s
base_lineplot <- ggplot(
# filter for counts > 1, for the highlighted words, and the top 40 words across all years
dei_word_counts %>% filter(n > 1 & Word != "other" & inclusive_teach_tokens %in% top_10_distinct),
aes(Year, n, Word = inclusive_teach_tokens)
) +
# lines for the non-highlighted words
geom_line(
data = dei_word_counts %>% filter(Word == "other"),
color = "grey75",
size = .6,
alpha = .5
) +
# lines for the highlighted words
geom_line(
aes(color = Word),
size = 0.9
) +
# # use ggrepel package to automatically place labels
# geom_text_repel(
#   aes(color = Word, label = name_lab),
#   family = "Lato",
#   fontface = "bold",
#   size = 3,
#   direction = "y",
#   hjust = 0,
#   segment.size = .7,
#   segment.alpha = .5,
#   segment.linetype = "dotted",
#   box.padding = .4,
#   segment.curvature = -0.1,
#   segment.ncp = 3,
#   segment.angle = 20,
#   show.legend = FALSE
# )  +
# labels
labs(x = "Year", y = "Word Count") +
# remove "a" from legend box
theme(legend.position = "none") +
# change the theme
theme_minimal() +
# remove legend
guides(fill = "none")
# create line graph s
base_lineplot <- ggplot(
# filter for counts > 1, for the highlighted words, and the top 40 words across all years
dei_word_counts %>% filter(n > 1 & Word != "other" & inclusive_teach_tokens %in% top_10_distinct),
aes(Year, n, Word = inclusive_teach_tokens)
) +
# lines for the non-highlighted words
geom_line(
data = dei_word_counts %>% filter(Word == "other"),
color = "grey75",
size = .6,
alpha = .5
) +
# lines for the highlighted words
geom_line(
aes(color = Word),
size = 0.9
) +
# # use ggrepel package to automatically place labels
# geom_text_repel(
#   aes(color = Word, label = name_lab),
#   family = "Lato",
#   fontface = "bold",
#   size = 3,
#   direction = "y",
#   hjust = 0,
#   segment.size = .7,
#   segment.alpha = .5,
#   segment.linetype = "dotted",
#   box.padding = .4,
#   segment.curvature = -0.1,
#   segment.ncp = 3,
#   segment.angle = 20,
#   show.legend = FALSE
# )  +
# labels
labs(x = "Year", y = "Word Count") +
# remove "a" from legend box
theme(legend.position = "none") +
# change the theme
theme_minimal() +
# remove legend
guides(fill = "none") +
# add colorblind safe palette
scale_color_manual(values = c("#40004b", "#762a83", "#9970ab", "#c51b7d", "#543005", "#053061", "#a6dba0", "#5aae61", "#1b7837", "#00441b"))
# arrange two plots into one column
require(gridExtra)
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
plot_grid(base_bargraph_over_time, base_lineplot, labels = c('A', 'B'), label_size = 12)
# create bar graph over time
base_bargraph_over_time <- dei_word_counts %>%
# using only 14.17% DEI related words in dataset
filter(inclusive_teach_tokens %in% top_10_distinct) %>%
# log the word counts, due to skewness
mutate(log_n = log(n)) %>%
ggplot(aes(inclusive_teach_tokens, log_n)) +
geom_col() +
facet_wrap(~Year, nrow = 2) +
labs(y = "Log(Word Count)") +
scale_fill_identity(guide = "none") +
# suppress the x axis
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
scale_x_discrete(labels = NULL, breaks = NULL) + labs(title = "A", x = " ") +
# change the theme
theme_minimal()
# create line graph s
base_lineplot <- ggplot(
# filter for counts > 1, for the highlighted words, and the top 40 words across all years
dei_word_counts %>% filter(n > 1 & Word != "other" & inclusive_teach_tokens %in% top_10_distinct),
aes(Year, n, Word = inclusive_teach_tokens)
) +
# lines for the non-highlighted words
geom_line(
data = dei_word_counts %>% filter(Word == "other"),
color = "grey75",
size = .6,
alpha = .5
) +
# lines for the highlighted words
geom_line(
aes(color = Word),
size = 0.9
) +
# # use ggrepel package to automatically place labels
# geom_text_repel(
#   aes(color = Word, label = name_lab),
#   family = "Lato",
#   fontface = "bold",
#   size = 3,
#   direction = "y",
#   hjust = 0,
#   segment.size = .7,
#   segment.alpha = .5,
#   segment.linetype = "dotted",
#   box.padding = .4,
#   segment.curvature = -0.1,
#   segment.ncp = 3,
#   segment.angle = 20,
#   show.legend = FALSE
# )  +
# labels
labs(title = "B", x = "Year", y = "Word Count") +
# remove "a" from legend box
theme(legend.position = "none") +
# change the theme
theme_minimal() +
# remove legend
guides(fill = "none") +
# add colorblind safe palette
scale_color_manual(values = c("#40004b", "#762a83", "#9970ab", "#c51b7d", "#543005", "#053061", "#a6dba0", "#5aae61", "#1b7837", "#00441b"))
# arrange two plots into one column
require(gridExtra)
grid.arrange(base_bargraph_over_time, base_lineplot, heights=c(3,2))
# creates side by side plot of box plot and bar plot (1 row, 2 columns), specify size of labels and margins (bottom, left, top, right)
par(mfrow = c(1,2), cex = 0.6, mai = c(0.7,0.75,0.3,0.4))
# define area for boxplot
par(fig = c(0,0.68,0,1), new = TRUE)
# run box plot
wrdctboxplot()
# define area for bar plot
par(fig=c(0.6,1,0,1), new = TRUE)
# store the base barplot in a variable
base_barplot <- barplot(data$Avg_Wrd_Ct ~ data$`Group Year`, axis.lty = 1, ylim = c(0,250), col = c("#b2df8a", "#1f78b4"), xlab = "Year", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
# rotate the x axis on the barplot
text(base_barplot, par("usr")[3], srt = 45, labels = c("2014 - 2018", "2019 - 2022") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
par(mfrow = c(1,2), cex = 0.6, mai = c(0.7,0.75,0.3,0.4))
# define area for boxplot
par(fig = c(0,0.68,0,1), new = TRUE)
# run box plot
wrdctboxplot()
# label box plot
text(x = 700, y = 2014, label = "A", cex = 2)
# define area for bar plot
par(fig=c(0.6,1,0,1), new = TRUE)
# store the base barplot in a variable
base_barplot <- barplot(data$Avg_Wrd_Ct ~ data$`Group Year`, axis.lty = 1, ylim = c(0,250), col = c("#b2df8a", "#1f78b4"), xlab = "Year", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
# rotate the x axis on the barplot
text(base_barplot, par("usr")[3], srt = 45, labels = c("2014 - 2018", "2019 - 2022") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
text(y = 250, label = "B", cex = 2)
# run box plot
wrdctboxplot()
# label box plot
text(x = 700, y = 2014, label = "A", cex = 2)
wrdctboxplot <- function(){
# factor years to reorder from oldest to most recent (to be consistent with table below)
rios_data$Year <- factor(rios_data$Year , levels=c("2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014"))
# create box plot and store in function
boxplot(`Word Count of Inclusive Teaching?`~ Year,
data=rios_data,
main = "A",
ylab="Year",
xlab="Word Count",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4", "#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a"))
# color and impose horizontal line of 2014 - 2018 group average word count
abline(v = 118.4868, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average word count
abline(v = 216.0667, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Word Count", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# unfactor years
rios_data$Year <-  unfactor(rios_data$Year)
}
## code for bar plot
# store data for bar plot
data <- rios_data %>%
group_by(`Group Year`) %>%
# calculate avg. wrd ct, length, and standard deviation for each group year
summarise(Avg_Wrd_Ct = mean(`Word Count of Inclusive Teaching?`, na.rm = TRUE),
n = n(),
sd = sd(`Word Count of Inclusive Teaching?`, na.rm = TRUE)) %>%
# calculate the standard error and  the standard error multiplied by the value of the t-distribution for 0.5
mutate(se = sd/sqrt(n),
ic = se * qt((1-0.05)/2 + 0.5, n-1))
# A function to add arrows on the chart
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
# creates side by side plot of box plot and bar plot (1 row, 2 columns), specify size of labels and margins (bottom, left, top, right)
par(mfrow = c(1,2), cex = 0.6, mai = c(0.7,0.75,0.3,0.4))
# define area for boxplot
par(fig = c(0,0.68,0,1), new = TRUE)
# run box plot
wrdctboxplot()
# label box plot
#text(x = 700, y = 2014, label = "A", cex = 2)
# define area for bar plot
par(fig=c(0.6,1,0,1), new = TRUE)
# store the base barplot in a variable
base_barplot <- barplot(data$Avg_Wrd_Ct ~ data$`Group Year`, axis.lty = 1, ylim = c(0,250), col = c("#b2df8a", "#1f78b4"), main = "B", xlab = "Year", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
# rotate the x axis on the barplot
text(base_barplot, par("usr")[3], srt = 45, labels = c("2014 - 2018", "2019 - 2022") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
base_barplot <- barplot(data$Avg_Wrd_Ct ~ data$`Group Year`, axis.lty = 1, ylim = c(0,250), col = c("#b2df8a", "#1f78b4"), main = "B", adj = 0, xlab = "Year", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
# rotate the x axis on the barplot
text(base_barplot, par("usr")[3], srt = 45, labels = c("2014 - 2018", "2019 - 2022") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
# store the base barplot in a variable
base_barplot <- barplot(data$Avg_Wrd_Ct ~ data$`Group Year`, axis.lty = 1, ylim = c(0,250), col = c("#b2df8a", "#1f78b4"), xlab = "Year", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
# rotate the x axis on the barplot
text(base_barplot, par("usr")[3], srt = 45, labels = c("2014 - 2018", "2019 - 2022") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
title("B", adj = 0)
## Code for box plot
wrdctboxplot <- function(){
# factor years to reorder from oldest to most recent (to be consistent with table below)
rios_data$Year <- factor(rios_data$Year , levels=c("2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014"))
# create box plot and store in function
boxplot(`Word Count of Inclusive Teaching?`~ Year,
data=rios_data,
main = "A",
ylab="Year",
xlab="Word Count",
horizontal = TRUE,
# color groups (color blind safe colors) based on the shift (2014-2018 and 2019-2022)
col = c("#1f78b4", "#1f78b4", "#1f78b4", "#1f78b4", "#b2df8a","#b2df8a", "#b2df8a", "#b2df8a", "#b2df8a"))
# label box plot and make title left-aligned
title("A", adj = 0)
# color and impose horizontal line of 2014 - 2018 group average word count
abline(v = 118.4868, col = "#b2df8a", lty = "solid", lwd = 3)
# color and impose horizontal line of 2019 - 2022 group average word count
abline(v = 216.0667, col = "#1f78b4",lty = "solid", lwd = 3)
# impose legend which explain horizontal lines
legend("topright", inset=.02, title="Average Word Count", c("for 2014 - 2018","for 2019 - 2022"), fill=c("#b2df8a", "#1f78b4"), horiz=FALSE, cex=0.8)
# unfactor years
rios_data$Year <-  unfactor(rios_data$Year)
}
## code for bar plot
# store data for bar plot
data <- rios_data %>%
group_by(`Group Year`) %>%
# calculate avg. wrd ct, length, and standard deviation for each group year
summarise(Avg_Wrd_Ct = mean(`Word Count of Inclusive Teaching?`, na.rm = TRUE),
n = n(),
sd = sd(`Word Count of Inclusive Teaching?`, na.rm = TRUE)) %>%
# calculate the standard error and  the standard error multiplied by the value of the t-distribution for 0.5
mutate(se = sd/sqrt(n),
ic = se * qt((1-0.05)/2 + 0.5, n-1))
# A function to add arrows on the chart
error.bar <- function(x, y, upper, lower=upper, length=0.1,...){
arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...)
}
# creates side by side plot of box plot and bar plot (1 row, 2 columns), specify size of labels and margins (bottom, left, top, right)
par(mfrow = c(1,2), cex = 0.6, mai = c(0.7,0.75,0.3,0.4))
# define area for boxplot
par(fig = c(0,0.68,0,1), new = TRUE)
# run box plot
wrdctboxplot()
# define area for bar plot
par(fig=c(0.6,1,0,1), new = TRUE)
# store the base barplot in a variable
base_barplot <- barplot(data$Avg_Wrd_Ct ~ data$`Group Year`, axis.lty = 1, ylim = c(0,250), col = c("#b2df8a", "#1f78b4"), xlab = "Year", ylab = "Average Word Count", xaxt = "n")
# add the error bar on the plot using my "error bar" function and run
error.bar(base_barplot, data$Avg_Wrd_Ct, data$ic)
# rotate the x axis on the barplot
text(base_barplot, par("usr")[3], srt = 45, labels = c("2014 - 2018", "2019 - 2022") , adj = c(1.1,1.1), xpd = TRUE, cex=.79)
# label bar plot and make title left-aligned
title("B", adj = 0)
# conduct a one sample t-test
testbygroupyr <- t.test(formula = `Word Count of Inclusive Teaching?` ~ `Group Year`, data = rios_data)
# print
testbygroupyr #p-value = 1.557e-10, confidence interval:  -126.37537  -68.78427, df = 254?!
# conduct a one sample t-test
testbyattendance <- t.test(formula = `Word Count of Inclusive Teaching?` ~ `Attended Workshop?`, data = rios_data)
# print
testbyattendance #p-value = 0.01227, confidence interval (difference btw. means):  -140.73083  -18.08968, df = 46.607
# conduct a one sample t-test
jeditestbyattendance <- t.test(formula = totaldeia ~ `Attended Workshop?`, data = dei_by_workshop_data)
View(rios_data)
View(dei_by_workshop_data)
View(dei_word_counts)
rios_data_tokenized %>%
filter(dei_relatedit == "TRUE") %>%
group_by(article_num, `Attended Workshop?`) %>%
count(inclusive_teach_tokens) %>%
summarise(totaldeia = n())
rios_data_tokenized %>%
filter(dei_relatedit == "TRUE") %>%
group_by(article_num, `Attended Workshop?`) %>%
count(inclusive_teach_tokens, sort = TRUE) %>%
summarise(totaldeia = n())
